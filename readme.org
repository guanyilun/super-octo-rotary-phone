* super-octo-rotary-phone
This is a julia learning project that implements a component
separation algorithm for CMB experiment in Julia -- sorry I wish it is
actually about a super octo rotary phone.

Currently, the code is able to produce the same result as fgbuster
with only 38 lines of code!

Now that I have had enough fun writing obscure codes, it's time to
rewrite it for performance. For a single pixel search, it is roughly
100 times faster than fgbuster. For a multi-resolution search with
nside=8, it is ~300-400 times faster than fgbuster.

#+BEGIN_SRC julia
@btime fgbuster.basic_comp_sep($components, $instrument, $obs; tol=1);

# result: 5.679 s (699 allocations: 23.70 MiB)

@btime res = compsep($comps, $freqs, $Nmat.^-2, $obs, xâ‚€=[-3,1.5,15.]);

# result: 60.788 ms (420728 allocations: 32.63 MiB)
#+END_SRC

The repo is very simplistic now. Some next steps include
- [X] allow passing in mask
- [X] allow multi-resolution
- [ ] bandpass integration
